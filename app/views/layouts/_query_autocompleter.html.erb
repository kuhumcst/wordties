<script>
 // Create a new YUI instance and populate it with the required modules.
 YUI().use('event', 'datasource', 'autocomplete', 'autocomplete-highlighters', function (Y) {
     var searchItemTemplate = 
 	"<div>" +
 	  "<span>{before}</span>" +
      "<span style='font-weight: bold'>{query}</span>" +
      "<span>{after}</span>" +
    "</div>";
    
    function selectSearchTerm(e) {
    	e.preventDefault();
    	Y.one('#queryInput').set('value', e.result.raw.term);
    	var filter = Y.one('#queryFilter input[name=filter_option]:checked').get("value")
    	gotoWord(e.result.raw.term, filter);
    	
    	return false;
    }
    
    function searchFormatter(query, results) {
	   return Y.Array.map(results, function (result) {
	    var searchResult = result.raw.term;
	
	    // Use string substitution to fill out the search template and
	    // return an HTML string for this result.
	    var matchIdx = searchResult.indexOf(query)
	    return Y.Lang.sub(searchItemTemplate, {
	    	query:	query,
	    	before: searchResult.substr(0, matchIdx),
	        after: 	searchResult.substr(matchIdx + query.length)
	    });
	  });
	 }
	 
	 function doChangeEvent(val) {
	 	oDS.set("source", "<%= word_suggestions_path %>/"+val);
        oDS.cache.flush();
	 }
	 
    // Add the yui3-skin-sam class to the body so the default
    // AutoComplete widget skin will be applied.
    Y.one('#querySuggestions').addClass('yui3-skin-sam');
    
    // Use an DataSource
    var oDS = new Y.DataSource.IO({source: "<%= word_suggestions_path %>/" + Y.one('#queryFilter input[name=filter_option]:checked').get("value")});
	oDS.plug({fn:Y.Plugin.DataSourceCache, cfg:{max:5}});
    oDS.plug(Y.Plugin.DataSourceTextSchema, {
   	 schema: {
   	 	resultDelimiter: "\n",
    	fieldDelimiter: "\t",
    	resultFields: [{key:"term"}]
   	 }
    });
    
   // AutoComplete instance 
   var inputNode = Y.one('#queryInput');
   inputNode.plug(Y.Plugin.AutoComplete, {
    activateFirstItem: true,
    resultHighlighter: 'wordMatch',
    resultFormatter: searchFormatter,
    requestTemplate: '/{query}',
    source: oDS,
    zIndex:10, // don't auto-align to the inputNode
    align: false,
    render: '#querySuggestions'
   });
   inputNode.ac.on('visibleChange', function (e) {
        var input = Y.one('#queryInput');
        if (e.newVal) {
            // Specify arbitrary x/y coords for the result list.
            var margin_top = 6, margin_right = 4;
            var dx = input.getX();
            var dy = input.getY() + parseFloat(input.getComputedStyle('height').split('px')[0]) + margin_top;
            input.ac.get('boundingBox').setXY([dx, dy]);
            input.ac.get('boundingBox').set('offsetWidth', parseFloat(input.getComputedStyle('width').split('px')[0]) + margin_right);
        }
   });
   inputNode.ac.on('results', function (e) {
        if (e.results.length) {
            lastValue = inputNode.ac.get('value');
        } else {
            inputNode.set('value', lastValue);
        }
    });
   inputNode.ac.on("select", selectSearchTerm);
   inputNode.ac.render();
   
   Y.all('#queryFilter input[type=radio]').each(function (node) {
    var node_val = node.get('value');
    
   	if(node_val.lastIndexOf("_aligned") != -1) node_val = node_val.substring(0, node_val.lastIndexOf("_aligned"));
    node.on('change', function () {
        var val = this.get('value');
        doChangeEvent(val);
    });
   });
 });
</script>
